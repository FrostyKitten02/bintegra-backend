/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package si.bintegra.sp.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

import si.bintegra.sp.model.PackageOffer;
import si.bintegra.sp.model.PackageOfferModel;

/**
 * The base model implementation for the PackageOffer service. Represents a row in the &quot;SP_PackageOffer&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>PackageOfferModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PackageOfferImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see PackageOfferImpl
 * @generated
 */
@JSON(strict = true)
public class PackageOfferModelImpl
	extends BaseModelImpl<PackageOffer> implements PackageOfferModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a package offer model instance should use the <code>PackageOffer</code> interface instead.
	 */
	public static final String TABLE_NAME = "SP_PackageOffer";

	public static final Object[][] TABLE_COLUMNS = {
		{"id_", Types.BIGINT}, {"packageId", Types.BIGINT},
		{"fullDuration", Types.BIGINT}, {"discountDuration", Types.BIGINT},
		{"basePrice", Types.DOUBLE}, {"discountPrice", Types.DOUBLE},
		{"active_", Types.BOOLEAN}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id_", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("packageId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("fullDuration", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("discountDuration", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("basePrice", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("discountPrice", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("active_", Types.BOOLEAN);
	}

	public static final String TABLE_SQL_CREATE =
		"create table SP_PackageOffer (id_ LONG not null primary key,packageId LONG,fullDuration LONG,discountDuration LONG,basePrice DOUBLE,discountPrice DOUBLE,active_ BOOLEAN)";

	public static final String TABLE_SQL_DROP = "drop table SP_PackageOffer";

	public static final String ORDER_BY_JPQL = " ORDER BY packageOffer.id ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY SP_PackageOffer.id_ ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ACTIVE_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long PACKAGEID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public PackageOfferModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return PackageOffer.class;
	}

	@Override
	public String getModelClassName() {
		return PackageOffer.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<PackageOffer, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<PackageOffer, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<PackageOffer, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((PackageOffer)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<PackageOffer, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<PackageOffer, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(PackageOffer)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<PackageOffer, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<PackageOffer, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<PackageOffer, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<PackageOffer, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<PackageOffer, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<PackageOffer, Object>>();
		Map<String, BiConsumer<PackageOffer, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<PackageOffer, ?>>();

		attributeGetterFunctions.put("id", PackageOffer::getId);
		attributeSetterBiConsumers.put(
			"id", (BiConsumer<PackageOffer, Long>)PackageOffer::setId);
		attributeGetterFunctions.put("packageId", PackageOffer::getPackageId);
		attributeSetterBiConsumers.put(
			"packageId",
			(BiConsumer<PackageOffer, Long>)PackageOffer::setPackageId);
		attributeGetterFunctions.put(
			"fullDuration", PackageOffer::getFullDuration);
		attributeSetterBiConsumers.put(
			"fullDuration",
			(BiConsumer<PackageOffer, Long>)PackageOffer::setFullDuration);
		attributeGetterFunctions.put(
			"discountDuration", PackageOffer::getDiscountDuration);
		attributeSetterBiConsumers.put(
			"discountDuration",
			(BiConsumer<PackageOffer, Long>)PackageOffer::setDiscountDuration);
		attributeGetterFunctions.put("basePrice", PackageOffer::getBasePrice);
		attributeSetterBiConsumers.put(
			"basePrice",
			(BiConsumer<PackageOffer, Double>)PackageOffer::setBasePrice);
		attributeGetterFunctions.put(
			"discountPrice", PackageOffer::getDiscountPrice);
		attributeSetterBiConsumers.put(
			"discountPrice",
			(BiConsumer<PackageOffer, Double>)PackageOffer::setDiscountPrice);
		attributeGetterFunctions.put("active", PackageOffer::getActive);
		attributeSetterBiConsumers.put(
			"active",
			(BiConsumer<PackageOffer, Boolean>)PackageOffer::setActive);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_id = id;
	}

	@JSON
	@Override
	public long getPackageId() {
		return _packageId;
	}

	@Override
	public void setPackageId(long packageId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_packageId = packageId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalPackageId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("packageId"));
	}

	@JSON
	@Override
	public long getFullDuration() {
		return _fullDuration;
	}

	@Override
	public void setFullDuration(long fullDuration) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_fullDuration = fullDuration;
	}

	@JSON
	@Override
	public long getDiscountDuration() {
		return _discountDuration;
	}

	@Override
	public void setDiscountDuration(long discountDuration) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_discountDuration = discountDuration;
	}

	@JSON
	@Override
	public double getBasePrice() {
		return _basePrice;
	}

	@Override
	public void setBasePrice(double basePrice) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_basePrice = basePrice;
	}

	@JSON
	@Override
	public double getDiscountPrice() {
		return _discountPrice;
	}

	@Override
	public void setDiscountPrice(double discountPrice) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_discountPrice = discountPrice;
	}

	@JSON
	@Override
	public boolean getActive() {
		return _active;
	}

	@JSON
	@Override
	public boolean isActive() {
		return _active;
	}

	@Override
	public void setActive(boolean active) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_active = active;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public boolean getOriginalActive() {
		return GetterUtil.getBoolean(
			this.<Boolean>getColumnOriginalValue("active_"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, PackageOffer.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public PackageOffer toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, PackageOffer>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		PackageOfferImpl packageOfferImpl = new PackageOfferImpl();

		packageOfferImpl.setId(getId());
		packageOfferImpl.setPackageId(getPackageId());
		packageOfferImpl.setFullDuration(getFullDuration());
		packageOfferImpl.setDiscountDuration(getDiscountDuration());
		packageOfferImpl.setBasePrice(getBasePrice());
		packageOfferImpl.setDiscountPrice(getDiscountPrice());
		packageOfferImpl.setActive(isActive());

		packageOfferImpl.resetOriginalValues();

		return packageOfferImpl;
	}

	@Override
	public PackageOffer cloneWithOriginalValues() {
		PackageOfferImpl packageOfferImpl = new PackageOfferImpl();

		packageOfferImpl.setId(this.<Long>getColumnOriginalValue("id_"));
		packageOfferImpl.setPackageId(
			this.<Long>getColumnOriginalValue("packageId"));
		packageOfferImpl.setFullDuration(
			this.<Long>getColumnOriginalValue("fullDuration"));
		packageOfferImpl.setDiscountDuration(
			this.<Long>getColumnOriginalValue("discountDuration"));
		packageOfferImpl.setBasePrice(
			this.<Double>getColumnOriginalValue("basePrice"));
		packageOfferImpl.setDiscountPrice(
			this.<Double>getColumnOriginalValue("discountPrice"));
		packageOfferImpl.setActive(
			this.<Boolean>getColumnOriginalValue("active_"));

		return packageOfferImpl;
	}

	@Override
	public int compareTo(PackageOffer packageOffer) {
		int value = 0;

		if (getId() < packageOffer.getId()) {
			value = -1;
		}
		else if (getId() > packageOffer.getId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof PackageOffer)) {
			return false;
		}

		PackageOffer packageOffer = (PackageOffer)object;

		long primaryKey = packageOffer.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<PackageOffer> toCacheModel() {
		PackageOfferCacheModel packageOfferCacheModel =
			new PackageOfferCacheModel();

		packageOfferCacheModel.id = getId();

		packageOfferCacheModel.packageId = getPackageId();

		packageOfferCacheModel.fullDuration = getFullDuration();

		packageOfferCacheModel.discountDuration = getDiscountDuration();

		packageOfferCacheModel.basePrice = getBasePrice();

		packageOfferCacheModel.discountPrice = getDiscountPrice();

		packageOfferCacheModel.active = isActive();

		return packageOfferCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<PackageOffer, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<PackageOffer, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<PackageOffer, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((PackageOffer)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, PackageOffer>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					PackageOffer.class, ModelWrapper.class);

	}

	private long _id;
	private long _packageId;
	private long _fullDuration;
	private long _discountDuration;
	private double _basePrice;
	private double _discountPrice;
	private boolean _active;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<PackageOffer, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((PackageOffer)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("id_", _id);
		_columnOriginalValues.put("packageId", _packageId);
		_columnOriginalValues.put("fullDuration", _fullDuration);
		_columnOriginalValues.put("discountDuration", _discountDuration);
		_columnOriginalValues.put("basePrice", _basePrice);
		_columnOriginalValues.put("discountPrice", _discountPrice);
		_columnOriginalValues.put("active_", _active);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("id_", "id");
		attributeNames.put("active_", "active");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("id_", 1L);

		columnBitmasks.put("packageId", 2L);

		columnBitmasks.put("fullDuration", 4L);

		columnBitmasks.put("discountDuration", 8L);

		columnBitmasks.put("basePrice", 16L);

		columnBitmasks.put("discountPrice", 32L);

		columnBitmasks.put("active_", 64L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private PackageOffer _escapedModel;

}